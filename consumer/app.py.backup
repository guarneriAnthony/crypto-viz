import redis
import json
import duckdb
import time
from datetime import datetime
import os

# Configuration Redis
redis_client = redis.Redis(host="redis", port=6379, db=0)
QUEUE_NAME = "crypto_data"

def process_data():
    """Lit les données de Redis et les stocke dans DuckDB"""
    print("Consumer démarré...", flush=True)
    
    # Créer la table si elle n'existe pas
    with duckdb.connect(database='/data/crypto_analytics.duckdb', read_only=False) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS crypto_prices (
                name VARCHAR,
                symbol VARCHAR,
                price DOUBLE,
                percent_change_24h DOUBLE,
                market_cap DOUBLE,
                timestamp TIMESTAMP
            )
        """)
    
    while True:
        # Récupère une donnée de la queue
        data = redis_client.rpop(QUEUE_NAME)
        
        if data:
            try:
                # Convertit JSON en dictionnaire Python
                crypto_item = json.loads(data)
                print(f"Traitement: {crypto_item['name']}", flush=True)
                
                # Ouvre une nouvelle connexion pour chaque insertion
                with duckdb.connect(database='/data/crypto_analytics.duckdb', read_only=False) as conn:
                    # Insert dans DuckDB
                    conn.execute("""
                        INSERT INTO crypto_prices 
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, [
                        crypto_item['name'],
                        crypto_item['symbol'],
                        crypto_item['price'],
                        crypto_item['percent_change_24h'],
                        crypto_item['market_cap'],
                        crypto_item['timestamp']
                    ])
                    
            except Exception as e:
                print(f"Erreur de traitement: {e}", flush=True)
        else:
            # Pas de données, attendre un peu
            time.sleep(1)

if __name__ == "__main__":
    process_data()